plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'com.google.protobuf'
    id 'idea'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.clearkeep.ck"
        minSdkVersion ConfigData.minSdk
        targetSdkVersion ConfigData.targetSdk
        versionCode ConfigData.versionCode
        versionName ConfigData.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86'
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "version"
    productFlavors {
        prod {
            dimension "version"
            resValue 'string', 'app_name', "ClearKeep"
            buildConfigField "String", 'BASE_URL', "\"54.235.68.160\""
            buildConfigField "int", 'PORT', "5000"
            buildConfigField "String", 'BASE_JANUS_URL', "\"54.235.68.160\""
            buildConfigField "int", 'JANUS_PORT', "8188"
        }
        staging {
            dimension "version"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            resValue 'string', 'app_name', "ClearKeep"
            buildConfigField "String", 'BASE_URL', "\"54.235.68.160\""
            buildConfigField "int", 'PORT', "25000"
            buildConfigField "String", 'BASE_JANUS_URL', "\"54.235.68.160\""
            buildConfigField "int", 'JANUS_PORT', "18188"
        }
        dev {
            dimension "version"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue 'string', 'app_name', "CK Dev"
            buildConfigField "String", 'BASE_URL', "\"develop3.clearkeep.org\""
            buildConfigField "int", 'PORT', "25000"
            buildConfigField "String", 'BASE_JANUS_URL', "\"54.235.68.160\""
            buildConfigField "int", 'JANUS_PORT', "28188"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
//        useIR = true
    }
    buildFeatures {
        compose true
        viewBinding true
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
        jni.srcDirs = []
    }

    composeOptions {
        kotlinCompilerVersion "$kotlin_version"
        kotlinCompilerExtensionVersion "$jetpack_compose_version"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude("META-INF/jersey-module-version")
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xskip-prerelease-check"]
    }
}

dependencies {
    implementation project(Modules.local)
    implementation project(Modules.remote)
    implementation project(Modules.domain)
    implementation project(Modules.common)
    implementation project(Modules.repository)
    implementation project(Modules.featureSplash)
    implementation project(Modules.featureCall)
    implementation project(Modules.featureShared)
    implementation project(Modules.featureChat)
    implementation project(Modules.featureAuth)
    implementation project(Modules.navigation)

    implementation Dependencies.jdk8
    implementation Dependencies.androidCore
    implementation Dependencies.appCompat
    implementation Dependencies.materialDesign
    implementation Dependencies.activity

    implementation Dependencies.coroutinesCore
    implementation Dependencies.coroutinesAndroid

    implementation Dependencies.gson

    //Architecture components
    implementation Dependencies.lifecycleExtensions
    implementation Dependencies.lifecycleLiveData
    implementation Dependencies.lifecycleLiveDataKtx
    implementation Dependencies.lifecycleViewModel
    implementation Dependencies.lifecycleViewModelKtx

    // Jetpack Compose
    implementation Dependencies.composeActivity
    implementation Dependencies.composeCompiler
    implementation Dependencies.composeRuntime
    implementation Dependencies.composeRuntimeLiveData
    implementation Dependencies.composeNavigation
    implementation Dependencies.composeUi
    implementation Dependencies.composeMaterialIcons
    implementation Dependencies.composeMaterialIconsExtended
    implementation Dependencies.composeMaterial
    implementation Dependencies.composeFoundation
    implementation Dependencies.composeFoundationLayout
    implementation Dependencies.composeAnimation
    implementation Dependencies.composeConstraintLayout
    implementation Dependencies.composeUiTooling

    // gRPC
    implementation Dependencies.okhttp
    implementation Dependencies.grpcStub
    implementation Dependencies.grpcOkhttp
    implementation(Dependencies.grpcProtoBufUtil) {
        exclude module: "protobuf-lite"
    }
    implementation Dependencies.javaxAnnotations

    //Signal
    implementation(Dependencies.signal) {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }

    // Room components
    implementation Dependencies.roomRuntime
    implementation Dependencies.roomKtx
    kapt Dependencies.roomCompiler
    androidTestImplementation Dependencies.roomTesting

    implementation Dependencies.constraintLayout

    // dagger
    implementation Dependencies.hilt
    kapt Dependencies.hiltCompiler

    // firebase
    implementation Dependencies.firebaseMessaging
    implementation Dependencies.firebaseAnalytics

    // Test
    testImplementation Dependencies.junit
    androidTestImplementation Dependencies.junitExt
    androidTestImplementation Dependencies.espresso

    //Glide
    implementation Dependencies.glide
    annotationProcessor Dependencies.glideCompiler
    implementation Dependencies.glideTransformations
    implementation Dependencies.toggleImageButton

    //Coil
    implementation Dependencies.coil
    implementation Dependencies.coilCompose

    //Jetpack Accompanist
    implementation Dependencies.accompanistSystemUi
    implementation Dependencies.accompanistInsets
    implementation Dependencies.accompanistSwipeRefresh

    implementation Dependencies.androidUploadService
}